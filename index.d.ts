// Generated by dts-bundle v0.7.3

/**
    * verson of civet extension
    */
export const version: string;
class ExtensionContext {
        static _isConnecting: boolean;
        constructor();
        get currentDB(): string;
        set onCurrentDBChange(cb: any);
        set onDownloadError(cb: (id: number, params: any) => void);
        set onDownloadSuccess(cb: (id: number, params: any) => void);
        set onCennectError(cb: any);
        set onCennectAgain(cb: (data: any) => {});
        send(msg: CivetExtensionRequest): boolean;
}
/**
    * resource of uri, such as file, web page, or remote machine setting etc.
    */
export class Resource {
        #private;
        constructor(context: ExtensionContext);
        addByPath(path: string, dbname?: string): Promise<boolean>;
        addByBinary(bin: ArrayBuffer, dbname?: string): boolean;
        onDownloadSuccess(cb: (id: number, params: any) => void): void;
        onDownloadFail(cb: (id: number, params: any) => void): void;
}
/**
    * resource of uri, such as file, web page, or remote machine setting etc.
    */
export let resource: Resource;
export function getAllResourceDB(): string[];
export function getCurrentActiveDB(): string;
export {};

export enum ExtensionRequest {
    AddResource = "addResource",
    GetAllResourceDB = "getAllDB",
    GetCurrentDB = "getCurrentDB"
}
export enum ExtensionResponse {
    NotifyDBChanged = "notifyDBChanged",
    NotifyDownloadError = "notifyDownloadError",
    NotifyDownloadSuccess = "notifyDownloadSuccess",
    NotifyConnectError = "notifyConnectError",
    NotifyAllResourceDB = "notifyAllResourceDB",
    NotifyCurrentDB = "notifyCurrentDB",
    NotifyReconnect = "notifyReconnect"
}
export class CivetExtensionRequest {
    #private;
    constructor(method: ExtensionRequest, params: any);
    static get id(): number;
    static set id(val: number);
    toJson(): {
        id: number;
        method: ExtensionRequest;
        params: any;
    };
}

